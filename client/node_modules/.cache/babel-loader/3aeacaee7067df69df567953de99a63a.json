{"ast":null,"code":"import _slicedToArray from \"/Users/kato/App/apollo-server/client/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/kato/App/apollo-server/client/my-app/src/App.js\";\n\nimport React, { useState } from \"react\";\nimport { ApolloProvider } from \"react-apollo\";\nimport { ApolloProvider as ApolloHooksProvider, userMutation, useQuery } from \"react-apollo-hooks\";\nimport { appClient } from \"./graphql/client\";\nimport { GET_USERS, CREATE_USER } from \"./graphql/tags/MyUser\"; // ユーザー表示用のリスト\n\nvar UserList = function UserList() {\n  var _useQuery = useQuery(GET_USERS),\n      data = _useQuery.data,\n      error = _useQuery.error,\n      loading = _useQuery.loading;\n\n  if (loading) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 12\n      }\n    }, \"Loading...\");\n  }\n\n  if (error) {\n    return \"Error! \".concat(error.message);\n  }\n\n  return /*#__PURE__*/React.createElement(\"ul\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }\n  }, data.users.map(function (user) {\n    return /*#__PURE__*/React.createElement(\"li\", {\n      key: user.id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }\n    }, user.name);\n  }));\n}; // 新規ユーザー作成\n\n\nvar UserInput = function UserInput() {\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      state = _useState2[0],\n      setState = _useState2[1];\n\n  var createUser = userMutation(CREATE_USER, {\n    update: function update(proxy, _ref) {\n      var createUser = _ref.data.createUser;\n      // ユーザー新規作成後にキャッシュを更新\n      proxy.writeQuery({\n        query: GET_USERS,\n        data: {\n          users: createUser\n        }\n      });\n    },\n    variables: {\n      name: state\n    }\n  });\n\n  var onChange = function onChange(e) {\n    setState(e.currentTarget.value);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: state,\n    onChange: onChange,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: createUser,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }, \"Add\"));\n};\n\nexport var App = function App() {\n  return /*#__PURE__*/React.createElement(ApolloProvider, {\n    client: appClient,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(ApolloHooksProvider, {\n    client: appClient,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(UserInput, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(UserList, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  })));\n};","map":{"version":3,"sources":["/Users/kato/App/apollo-server/client/my-app/src/App.js"],"names":["React","useState","ApolloProvider","ApolloHooksProvider","userMutation","useQuery","appClient","GET_USERS","CREATE_USER","UserList","data","error","loading","message","users","map","user","id","name","UserInput","state","setState","createUser","update","proxy","writeQuery","query","variables","onChange","e","currentTarget","value","App"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,cAAT,QAA+B,cAA/B;AACA,SACEA,cAAc,IAAIC,mBADpB,EAEEC,YAFF,EAGEC,QAHF,QAIO,oBAJP;AAMA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SAASC,SAAT,EAAoBC,WAApB,QAAuC,uBAAvC,C,CAEA;;AACA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;AAAA,kBACYJ,QAAQ,CAACE,SAAD,CADpB;AAAA,MACbG,IADa,aACbA,IADa;AAAA,MACPC,KADO,aACPA,KADO;AAAA,MACAC,OADA,aACAA,OADA;;AAGrB,MAAIA,OAAJ,EAAa;AACX,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAP;AACD;;AAED,MAAID,KAAJ,EAAW;AACT,4BAAiBA,KAAK,CAACE,OAAvB;AACD;;AAED,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGH,IAAI,CAACI,KAAL,CAAWC,GAAX,CAAe,UAACC,IAAD;AAAA,wBACd;AAAI,MAAA,GAAG,EAAEA,IAAI,CAACC,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAmBD,IAAI,CAACE,IAAxB,CADc;AAAA,GAAf,CADH,CADF;AAOD,CAlBD,C,CAoBA;;;AACA,IAAMC,SAAS,GAAG,SAAZA,SAAY,GAAM;AAAA,kBACIlB,QAAQ,CAAC,EAAD,CADZ;AAAA;AAAA,MACfmB,KADe;AAAA,MACRC,QADQ;;AAGtB,MAAMC,UAAU,GAAGlB,YAAY,CAACI,WAAD,EAAc;AAC3Ce,IAAAA,MAAM,EAAE,gBAACC,KAAD,QAAqC;AAAA,UAAnBF,UAAmB,QAA3BZ,IAA2B,CAAnBY,UAAmB;AAC3C;AACAE,MAAAA,KAAK,CAACC,UAAN,CAAiB;AACfC,QAAAA,KAAK,EAAEnB,SADQ;AAEfG,QAAAA,IAAI,EAAE;AACJI,UAAAA,KAAK,EAAEQ;AADH;AAFS,OAAjB;AAMD,KAT0C;AAU3CK,IAAAA,SAAS,EAAE;AAAET,MAAAA,IAAI,EAAEE;AAAR;AAVgC,GAAd,CAA/B;;AAaA,MAAMQ,QAAQ,GAAG,SAAXA,QAAW,CAACC,CAAD,EAAO;AACtBR,IAAAA,QAAQ,CAACQ,CAAC,CAACC,aAAF,CAAgBC,KAAjB,CAAR;AACD,GAFD;;AAIA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,KAAK,EAAEX,KAA1B;AAAiC,IAAA,QAAQ,EAAEQ,QAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE;AAAQ,IAAA,OAAO,EAAEN,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAFF,CADF;AAMD,CA1BD;;AA4BA,OAAO,IAAMU,GAAG,GAAG,SAANA,GAAM;AAAA,sBACjB,oBAAC,cAAD;AAAgB,IAAA,MAAM,EAAE1B,SAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,mBAAD;AAAqB,IAAA,MAAM,EAAEA,SAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF,CADiB;AAAA,CAAZ","sourcesContent":["import React, { useState } from \"react\";\nimport { ApolloProvider } from \"react-apollo\";\nimport {\n  ApolloProvider as ApolloHooksProvider,\n  userMutation,\n  useQuery,\n} from \"react-apollo-hooks\";\n\nimport { appClient } from \"./graphql/client\";\nimport { GET_USERS, CREATE_USER } from \"./graphql/tags/MyUser\";\n\n// ユーザー表示用のリスト\nconst UserList = () => {\n  const { data, error, loading } = useQuery(GET_USERS);\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  if (error) {\n    return `Error! ${error.message}`;\n  }\n\n  return (\n    <ul>\n      {data.users.map((user) => (\n        <li key={user.id}>{user.name}</li>\n      ))}\n    </ul>\n  );\n};\n\n// 新規ユーザー作成\nconst UserInput = () => {\n  const [state, setState] = useState(\"\");\n\n  const createUser = userMutation(CREATE_USER, {\n    update: (proxy, { data: { createUser } }) => {\n      // ユーザー新規作成後にキャッシュを更新\n      proxy.writeQuery({\n        query: GET_USERS,\n        data: {\n          users: createUser,\n        },\n      });\n    },\n    variables: { name: state },\n  });\n\n  const onChange = (e) => {\n    setState(e.currentTarget.value);\n  };\n\n  return (\n    <div>\n      <input type=\"text\" value={state} onChange={onChange} />\n      <button onClick={createUser}>Add</button>\n    </div>\n  );\n};\n\nexport const App = () => (\n  <ApolloProvider client={appClient}>\n    <ApolloHooksProvider client={appClient}>\n      <UserInput />\n      <UserList />\n    </ApolloHooksProvider>\n  </ApolloProvider>\n);\n"]},"metadata":{},"sourceType":"module"}